# -*- coding: utf-8 -*-
"""SLP ASSI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Ndm_LPV2jci7WU2xvsg9LoNVTUOy7EQ
"""

import tensorflow as tf
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.models import Model
import numpy as np
import nltk
from nltk.translate.bleu_score import sentence_bleu

# Sample hyperparameters
embedding_dim = 100
units = 512
vocab_size_src = 10000  # Change according to your dataset
vocab_size_tgt = 10000

class Encoder(Model):
    def __init__(self, vocab_size, embedding_dim, enc_units, batch_sz):
        super(Encoder, self).__init__()
        self.batch_sz = batch_sz
        self.enc_units = enc_units
        self.embedding = Embedding(vocab_size, embedding_dim)
        self.lstm = LSTM(self.enc_units, return_sequences=True, return_state=True)

    def call(self, x, hidden):
        x = self.embedding(x)
        output, state_h, state_c = self.lstm(x, initial_state=hidden)
        return output, state_h, state_c

    def initialize_hidden_state(self):
        return [tf.zeros((self.batch_sz, self.enc_units)) for _ in range(2)]

class BahdanauAttention(tf.keras.layers.Layer):
    def __init__(self, units):
        super(BahdanauAttention, self).__init__()
        self.W1 = Dense(units)
        self.W2 = Dense(units)
        self.V = Dense(1)

    def call(self, query, values):
        query_with_time_axis = tf.expand_dims(query, 1)
        score = self.V(tf.nn.tanh(self.W1(query_with_time_axis) + self.W2(values)))
        attention_weights = tf.nn.softmax(score, axis=1)
        context_vector = attention_weights * values
        context_vector = tf.reduce_sum(context_vector, axis=1)
        return context_vector, attention_weights

class Decoder(Model):
    def __init__(self, vocab_size, embedding_dim, dec_units, batch_sz):
        super(Decoder, self).__init__()
        self.batch_sz = batch_sz
        self.dec_units = dec_units
        self.embedding = Embedding(vocab_size, embedding_dim)
        self.lstm = LSTM(self.dec_units, return_sequences=True, return_state=True)
        self.fc = Dense(vocab_size, activation='softmax')
        self.attention = BahdanauAttention(self.dec_units)

    def call(self, x, hidden, enc_output):
        context_vector, attention_weights = self.attention(hidden[0], enc_output)
        x = self.embedding(x)
        x = tf.concat([tf.expand_dims(context_vector, 1), x], axis=-1)
        output, state_h, state_c = self.lstm(x, initial_state=hidden)
        output = tf.reshape(output, (-1, output.shape[2]))
        x = self.fc(output)
        return x, state_h, state_c, attention_weights

# Example usage:
batch_size = 64
encoder = Encoder(vocab_size_src, embedding_dim, units, batch_size)
decoder = Decoder(vocab_size_tgt, embedding_dim, units, batch_size)

# Example input
sample_hidden = encoder.initialize_hidden_state()
sample_input = tf.random.uniform((batch_size, 10), dtype=tf.int32, minval=0, maxval=vocab_size_src)
enc_output, enc_hidden_h, enc_hidden_c = encoder(sample_input, sample_hidden)

sample_target = tf.random.uniform((batch_size, 1), dtype=tf.int32, minval=0, maxval=vocab_size_tgt)
predictions, dec_hidden_h, dec_hidden_c, _ = decoder(sample_target, [enc_hidden_h, enc_hidden_c], enc_output)

print("Encoder output shape:", enc_output.shape)
print("Decoder prediction shape:", predictions.shape)

# BLEU score evaluation
y_test = ["hello world", "how are you", "good morning"]  # Reference translations
predicted_sentences = ["hello earth", "how do you do", "morning good"]  # Model outputs (dummy data)

# Compute BLEU scores
bleu_scores = []
for true, pred in zip(y_test, predicted_sentences):
    reference = [true.split()]  # BLEU expects tokenized reference list
    candidate = pred.split()  # Tokenized predicted output
    bleu_score = sentence_bleu(reference, candidate)
    bleu_scores.append(bleu_score)

# Calculate and print the average BLEU score
avg_bleu_score = sum(bleu_scores) / len(bleu_scores)
print(f"Average BLEU Score: {avg_bleu_score:.2f}")